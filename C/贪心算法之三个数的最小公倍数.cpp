//已知一个正整数N，问从1~N中任选出三个数，他们的最小公倍数最大可以为多少。
#include<stdio.h>
int main()
{
	long long n,ans;
	scanf("%d",&n);
	if(n%2==1)
	ans=n*(n-1)*(n-2);
	else
	{
		if(n%3==0)
		ans=(n-1)*(n-2)*(n-3);
		else
		ans=n*(n-1)*(n-3);
	}
	printf("%lld",ans);
	return 0;
 } 
 // 如果是两个数  那么一定是  n*(n-1)
 // 由于是三个数  最小公倍数最大可以为  ： 必定有 n*(n-1) 这两个数一定是互斥的 
 //  关键在第三个数的选取  当是奇数时（不能被2整除） ：选 n-2
 //						   当是偶数时 				 ：
 //									 				 ：（不能被3整除） 选  n-3
 //													 ：（能被3整除）   选 （n-1）*(n-2)*(n-3)  不能选 n 了 因为 n n-3 一定不是互斥的
 // 为什么以 （不能被 3整除）为分界线呢， 
 // 答：只有三个数 
 
 /*突然来的灵感，如果不确定，算出 n*(n-1)*(n-2)  ans=(n-1)*(n-2)*(n-3);  ans=n*(n-1)*(n-3); 最大的一个就好了 */ 
